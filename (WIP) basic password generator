import re  
import secrets  
import string 

def generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):
    # Define the possible characters for the password
    letters = string.ascii_letters  # uppercase and lowercase chars
    digits = string.digits  # All digits
    symbols = string.punctuation  # punctuation symbols

    #form character pool for password generator
    all_characters = letters + digits + symbols

    # Loop till true
    while True:
        password = ''  # Initialize an empty password string

        for _ in range(length):
            password += secrets.choice(all_characters)  # Choose a random character from the pool
        
        # requirements for password
        constraints = [
            (nums, r'\d'), 
            (special_chars, fr'[{symbols}]'),  
            (uppercase, r'[A-Z]'),  
            (lowercase, r'[a-z]')
        ]

        # Check if the generated password meets all constraints
        if all(
            constraint <= len(re.findall(pattern, password))  # Compare generated with constraint
            for constraint, pattern in constraints
        ):
            break 
    
    return password 

# To prevent running when imported as module
if __name__ == '__main__':
    # Generate a password using default parameters
    new_password = generate_password()
    # Print the generated password
    print('Generated password:', new_password)
