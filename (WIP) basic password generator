# Import necessary modules
import re  # Regular expression operations
import secrets  # Cryptographically strong random number generator
import string  # Common string operations

# Define a function to generate a password, length set as default 16 char
def generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):
    # Define the possible characters for the password
    letters = string.ascii_letters  # All ASCII letters (uppercase and lowercase)
    digits = string.digits  # All digits
    symbols = string.punctuation  # All punctuation symbols

    # Combine all characters to form the pool for password generation
    all_characters = letters + digits + symbols

    # Loop until a valid password is generated
    while True:
        password = ''  # Initialize an empty password string

        # Generate the password character by character
        for _ in range(length):
            password += secrets.choice(all_characters)  # Choose a random character from the pool
        
        # Define constraints for the password
        constraints = [
            (nums, r'\d'),  # Constraint for numbers
            (special_chars, fr'[{symbols}]'),  # Constraint for special characters
            (uppercase, r'[A-Z]'),  # Constraint for uppercase letters
            (lowercase, r'[a-z]')  # Constraint for lowercase letters
        ]

        # Check if the generated password meets all constraints
        if all(
            constraint <= len(re.findall(pattern, password))  # Compare the number of occurrences of the pattern with the constraint
            for constraint, pattern in constraints  # Iterate over each constraint and corresponding pattern
        ):
            break  # Exit the loop if all constraints are met
    
    return password  # Return the generated password

# To prevent running when imported as module
if __name__ == '__main__':
    # Generate a password using default parameters
    new_password = generate_password()
    # Print the generated password
    print('Generated password:', new_password)
