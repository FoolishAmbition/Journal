def arithmetic_arranger(problems, show_answers=False):
    """
    Arranges arithmetic problems vertically and optionally shows the answers.

    Parameters:
    problems (list): A list of arithmetic problems as strings (e.g., "32 + 698").
    show_answers (bool): If True, displays the calculated results.

    Returns:
    str: Formatted arithmetic problems arranged vertically.
    """

    # Check if the number of problems exceeds the allowed limit (5 problems max)
    if len(problems) > 5:
        return 'Error: Too many problems.'

    # Lists to store different parts of the formatted output
    top_line = []
    second_line = []
    dash_line = []
    results_line = []

    # Iterate over each problem in the list
    for problem in problems:
        parts = problem.split()  # Split the problem into components (e.g., ["32", "+", "698"])

        # Validate that the problem has exactly three components: operand1, operator, operand2
        if len(parts) != 3:
            return "Error: Invalid problem format."

        left_operand, operator, right_operand = parts  # Assign variables for readability

        # Validate that the operator is either '+' or '-'
        if operator not in ("+", "-"):
            return "Error: Operator must be '+' or '-'."

        # Ensure both operands contain only numeric characters (no letters or special characters)
        if not left_operand.isdigit() or not right_operand.isdigit():
            return 'Error: Numbers must only contain digits.'

        # Ensure that numbers do not exceed four digits
        if len(left_operand) > 4 or len(right_operand) > 4:
            return "Error: Numbers cannot be more than four digits."

        # Determine the width of the formatted problem (largest operand length + 2 for spacing)
        width = max(len(left_operand), len(right_operand)) + 2

        # Format and append each part to the respective lists
        top_line.append(left_operand.rjust(width))  # Right-align first operand
        second_line.append(operator + right_operand.rjust(width - 1))  # Operator + right operand
        dash_line.append("-" * width)  # Dashed separator line

        # Calculate and store the result if `show_answers` is True
        if show_answers:
            result = str(int(left_operand) + int(right_operand)) if operator == "+" else str(int(left_operand) - int(right_operand))
            results_line.append(result.rjust(width))  # Right-align the result

    # Construct the final formatted output
    arranged_problems = "    ".join(top_line) + "\n"  # First line (operands)
    arranged_problems += "    ".join(second_line) + "\n"  # Second line (operator + operand)
    arranged_problems += "    ".join(dash_line)  # Third line (dashes)

    # Append the results if requested
    if show_answers:
        arranged_problems += "\n" + "    ".join(results_line)

    return arranged_problems


# Example usage: Display formatted arithmetic problems
print(arithmetic_arranger(["32 + 698", "3801 - 2", "45 + 43", "123 + 49"], show_answers=True))
